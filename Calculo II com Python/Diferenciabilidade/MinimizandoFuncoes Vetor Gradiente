import random
import math
import time
from sympy import *

x, y, z, t = symbols("x y z t") # Define símbolos para variáveis genericas
k, m, n = symbols("k m n", integer=True)  # Define símbolos para variáveis inteiras
f, g, h = map(Function, 'fgh') # define símbolos para funções


def vetorGradiente(funcao):         # Funcao que define o vetor gradiente de uma funcao f(x,y)
    diffX = diff(funcao, x)
    diffY = diff(funcao, y)
    return Matrix([diffX, diffY])

def newton(f, x0=0, eps=0.0001, itmax=100):          # Metodo de Newton para raízes de uma funcao de uma variavel

    df = diff(f, x)  # Diferencia a função recebida
    erro = 100
    L = range(1, itmax + 1)  # Vetor com o numero de iterações maximas
    iteracao = 0  # Contador de iteraões
    a = x0  # Ponto que o método será aplicado

    for i in L:  # Itera o vetor de iterações máximas

        raiz = round(a,5)  # Salva o ponto a ser testado na variável raiz e limita o numero de casas para não atrasar o processamento

        if df.subs([(x, raiz)]) != 0:  # se a derivada for zero naquele ponto, não é possível realizar a operação

            raiz = raiz - f.subs([(x, raiz)]) / df.subs([(x, raiz)])  # Acha a nova raiz a partir do método
            erro = abs(raiz - a)  # Qual a distância dele para a raíz anterior?

            a = raiz  # Salva essa raiz na variável a
            iteracao = i
        else:

            iteracao = itmax + 1  # Atribui a iteração maxima, caso não tenha sido possivel realizar a operação
            break  # Pode sair do loop

        if abs(erro) <= eps:  # Se o erro for menor que o epsilon fixado, pode sair
            break

    if iteracao > itmax:  # Se as iterações excedeu, retorna 0.25
        iteracao = 0.25
    elif iteracao == itmax:  # Se as iterações foram precisamente as mesmas do máximo, re
        iteracao = 0.75
    return [round(raiz, 5), round(erro, 5), iteracao]


def pontoOtimoFuncaoDuasVariaveis(f, p0, eps=0.001):
    gradiente = vetorGradiente(f)           # Calcula o vetor gradiente de f(x,y)

    z0 = f.subs([(x, p0[0]), (y, p0[1])])  # Ponto inicial da iteração

    pontos = [[p0[0], p0[1], z0]]          # Salva a informação
    e = math.inf

    while e > eps:
        v = p0 - x * (gradiente.subs([(x, p0[0]), (y, p0[1])]))  # Vetor paralelo ao gradiente e que passa por p0
        g = f.subs([(x, v[0]), (y, v[1])])                      # Funcao parametrizada em uma só varíavel do vetor v

        x1 = newton(diff(g))[0]  # Ponto otimo da funcao x -- reparar que ela diferenciada antes de ir para a funcao newton

        p0 = p0 - x1 * (gradiente.subs([(x, p0[0]), (y, p0[1])]))  # Novo passo que o vetor gradiente deu
        z1 = f.subs([(x, p0[0]), (y, p0[1])])  # Novo valor da funcao
        e = abs(z1 - z0)
        z0 = z1

        if z0.is_real:
            pontos.append([p0[0], p0[1], z0])   # Guarda os valores
        else:
            break   # Se nao for real, saiu do domínio. O que não quer dizer que não vá convergir, mas computacionalmente
                    # É muito custo e acaba não compensando

    return pontos

def dominio(x0,ymin, ymax, mask):       # Funcao responsável por garantir que os pontos iniciais estarão dentro do domínio
                                        # Caso venha ser usado outra função, ela precisa ser revisada
    y0 = random.uniform(ymax, ymin)
    if mask.subs([(x,x0),(y,y0)]) >= 0:
        return y0
    else:
        if y0>0:
            return dominio(x0,ymin, y0, mask)
        else:
            return dominio(x0, y0, ymax, mask)


def geraPontos(z, a):          # Gera a pontos iniciais dentro do dominio de z
    pontosIniciais = []

    for i in range(a):
        x0 = random.uniform(-3, 3)
        y0 = dominio(x0, -8, 8, 1 - ((x ** 2) / 64) - ((y ** 2) / 9))
        pontosIniciais.append(Matrix([x0, y0]))

    pontosTotais = []
    for i in pontosIniciais:
        pontosTotais.append(pontoOtimoFuncaoDuasVariaveis(z, i))       # Otimiza os a pontos gerados

    n = 0
    for i in pontosTotais:  # Conta qual foi o maior numero de passos dado
        if len(i) > n:
            n = len(i)
        else:
            continue

    return pontosIniciais, pontosTotais, n


z = x * y * (1-((x**2)/9)-((y**2)/64))**0.5
maxGlobal = -math.inf
minGlobal = math.inf
m = 15
timeInc = time.time()

pontosIniciais, pontosTotais, n = geraPontos(z,m)

for i in pontosTotais:
    if i[-1][2] > maxGlobal:
        maxGlobal = i[-1][2]
    else:
        pass

    if i[-1][2] < minGlobal:
        minGlobal = i[-1][2]

timeFin = time.time() - timeInc

print(f'Numero de pontos gerados: {m}')
print(f'Maior número de passos dado até a convergencia: {n}')
print(f'Maximo global: {maxGlobal}')
print(f'Minimo global: {minGlobal}')
print(f'Tempo de execução:{timeFin}')
